[
{
	'type' : 'TopLevel',
	'parent' : 'KalimatAst',
	'arabic' : 'عنصر.مستوى.أساسي',
	'nodes' : []
},
{ 
  "type" :"Statement", 
  "arabic" : "أمر",
  "parent": "TopLevel",
  "nodes" : []
},
{ 
  "type" :"Expression", 
  "arabic" : "تعبير",
  "parent": "KalimatAst",
  "nodes" : []
},
{
	"type": "IOStatement",
	"arabic" : "أمر.دخل.خرج",
	"parent" : "Statement",
	"nodes" :[]
},
{
	"type": "GraphicsStatement",
	"arabic" : "أمر.رسومي",
	"parent" : "Statement",
	"nodes" :[]
},
{
	"type": "ChannelCommunicationStmt",
	"arabic" : "أمر.اتصال.بقناة",
	"parent" : "Statement",
	"nodes" :[]
},
{
	"type": "CompilationUnit",
	"arabic" : "أمر.اتصال.بقناة",
	"parent" : "KalimatAst",
	"nodes" :[{'type': 'StrLiteral', 'vector': true, 'name': 'usedModules'}]
},
{
	"type": "Program",
	"arabic" : "أمر.اتصال.بقناة",
	"parent" : "CompilationUnit",
	"nodes" :[{'type': 'TopLevel', 'vector': true, 'name': 'elements'},
			  {'type': 'StrLiteral', 'vector': true, 'hasAddFunction': true, 'name': 'originalElements', 'comment': "// Original layout without collecting top-level statements // into a 'main' function. Used for pretty-printing...etc"}
	]
},
{
	"type": "Module",
	"arabic" : "أمر.اتصال.بقناة",
	"parent" : "CompilationUnit",
	"nodes" :[{'type': 'Declaration', 'vector': true, hasAddFunction: true, 'name': 'declarations'}
	]
},
{
	"type": "AssignableExpression",
	"arabic" : "أمر.اتصال.بقناة",
	"parent" : "Expression",
	"nodes" :[]
},
{
	"type": "Literal",
	"arabic" : "أمر.اتصال.بقناة",
	"parent" : "Expression",
	"nodes" :[]
},
 {
	"type": "SimpleLiteral",
	"arabic" : "أمر.اتصال.بقناة",
	"parent" : "Literal",
	"nodes" :[]
},

{
	"type": "AssignmentStmt",
	"arabic" : "أمر.تخصيص",
	"parent" : "Statement",
	"nodes" :[{"type": "AssignableExpression", 'name' : 'variable', 'arabic' : 'متغير'},
			  {"type": "Expression", 'name' : 'value', 'arabic' : 'قيمة'}
	]
},
{
	"type": "IfStmt",
	"arabic" : "أمر.إذا",
	"parent" : "Statement",
	"nodes" :[{"type": "Expression", 'name' : 'condition', 'arabic' : 'شرط'},
			  {"type": "Statement", 'name' : 'thenPart', 'arabic' : 'لوصحيح'},
			  {"type": "Statement", 'name' : 'elsePart', 'arabic' : 'لوخطأ'}
	]
},
{
	"type": "WhileStmt",
	"arabic" : "أمر.طالما",
	"parent" : "Statement",
	"nodes" :[{"type": "Expression", 'name' : 'condition', 'arabic' : 'شرط'},
			  {"type": "Statement", 'name' : 'statement', 'arabic' : 'أمر'}
	]
},
{
	"type": "ForAllStmt", 
	"arabic" : "أمر.لكل",
	"parent" : "Statement",
	"nodes" :[{"type": "Identifier", 'name' : 'variable', 'arabic' : 'عداد'},
			  {"type": "Expression", 'name' : 'from', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'to', 'arabic' : 'جزء.إلى'},
			  {"type": "Statement", 'name' : 'statement', 'arabic' : 'أمر'}
	]
},
{
	"type": "ReturnStmt",
	"arabic" : "أمر.لكل",
	"parent" : "Statement",
	"nodes" :[{"type": "Expression", 'name' : 'returnVal', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "DelegationStmt",
	"arabic" : "أمر.لكل",
	"parent" : "Statement",
	"nodes" :[{"type": "IInvokation", 'name' : 'invokation', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "LaunchStmt",
	"arabic" : "أمر.لكل",
	"parent" : "Statement",
	"nodes" :[{"type": "IInvokation", 'name' : 'invokation', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "LabelStmt",
	"arabic" : "أمر.لكل",
	"parent" : "Statement",
	"nodes" :[{"type": "Expression", 'name' : 'target', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "GotoStmt",
	"arabic" : "أمر.لكل",
	"parent" : "Statement",
	"nodes" :[{"type": "bool", 'name' : 'targetIsNumber', 'arabic' : 'جزء.من'},
		      {"type": "NumLiteral", 'name' : 'numericTarget', 'arabic' : 'جزء.من'},
			  {"type": "Identifier", 'name' : 'idTarget', 'arabic' : 'جزء.من'}
	]
},
{
	"type":  "PrintStmt",
	"arabic" : "أمر.لكل",
	"parent" : "IOStatement",
	"nodes" :[{"type": "Expression", 'name' : 'fileObject', 'arabic' : 'جزء.من'},
		      {"vector": true, "type": "Expression", 'name' : 'args', 'arabic' : 'جزء.من'},
			  {"vector": true, "type": "Expression", 'name' : 'widths', 'arabic' : 'جزء.من'},
			  {"type": "bool", 'name' : 'printOnSameLine', 'arabic' : 'جزء.من'}
	]
},
{
	"type":  "ReadStmt",
	"arabic" : "أمر.لكل",
	"parent" : "IOStatement",
	"nodes" :[{"type": "Expression", 'name' : 'fileObject', 'arabic' : 'جزء.من'},
			  {"type": "QString", 'name': 'prompt', arabic : ''},
		      {"vector": true, "type": "AssignableExpression", 'name' : 'variables', 'arabic' : 'جزء.من'},
			  {"vector": true, "type": "bool", 'name' : 'readNumberFlags', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "DrawPixelStmt",
	"arabic" : "أمر.لكل",
	"parent" : "GraphicsStatement",
	"nodes" :[{"type": "Expression", 'name' : 'x', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'y', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'color', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "DrawLineStmt",
	"arabic" : "أمر.لكل",
	"parent" : "GraphicsStatement",
	"nodes" :[{"type": "Expression", 'name' : 'x1', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'y1', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'x2', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'y2', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'color', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "DrawRectStmt",
	"arabic" : "أمر.لكل",
	"parent" : "GraphicsStatement",
	"nodes" :[{"type": "Expression", 'name' : 'x1', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'y1', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'x2', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'y2', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'color', 'arabic' : 'جزء.من'}
			  {"type": "Expression", 'name' : 'filled', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "DrawCircleStmt",
	"arabic" : "أمر.لكل",
	"parent" : "GraphicsStatement",
	"nodes" :[{"type": "Expression", 'name' : 'cx', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'cy', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'radius', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'color', 'arabic' : 'جزء.من'}
			  {"type": "Expression", 'name' : 'filled', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "DrawImageStmt",
	"arabic" : "أمر.لكل",
	"parent" : "GraphicsStatement",
	"nodes" :[{"type": "Expression", 'name' : 'x', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'y', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'image', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "DrawSpriteStmt",
	"arabic" : "أمر.لكل",
	"parent" : "GraphicsStatement",
	"nodes" :[{"type": "Expression", 'name' : 'x', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'y', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'sprite', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "DrawLineStmt",
	"arabic" : "أمر.لكل",
	"parent" : "GraphicsStatement",
	"nodes" :[{"type": "Expression", 'name' : 'x1', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'y1', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'x2', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'y2', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'color', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "EventType",
	"enum" : true,
	"members" : 
	[
	{'name':'KalimatKeyDownEvent',arabic:''},
	{'name':'KalimatKeyUpEvent',arabic:''},
	{'name':'KalimatKeyPressEvent',arabic:''},
	{'name':'KalimatMouseUpEvent',arabic:''},
	{'name':'KalimatMouseDownEvent',arabic:''},
	{'name':'KalimatMouseMoveEvent',arabic:''},
	{'name':'KalimatSpriteCollisionEvent',arabic:''}
	]
}
{
	"type": "EventStatement",
	"arabic" : "أمر.لكل",
	"parent" : "Statement",
	"nodes" :[{"type": "EventType", 'name' : 'type', 'arabic' : 'جزء.من'},
			  {"type": "Identifier", 'name' : 'handler', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "SendStmt",
	"arabic" : "أمر.لكل",
	"parent" : "ChannelCommunicationStmt",
	"nodes" :[{"type": "Expression", 'name' : 'value', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'channel', 'arabic' : 'جزء.من'},
			  {"type": "bool", 'name' : 'signal', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "ReceiveStmt",
	"arabic" : "أمر.لكل",
	"parent" : "ChannelCommunicationStmt",
	"nodes" :[{"type": "AssignableExpression", 'name' : 'value', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'channel', 'arabic' : 'جزء.من'},
			  {"type": "bool", 'name' : 'signal', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "SelectStmt",
	"arabic" : "أمر.لكل",
	"parent" : "Statement",
	"nodes" :[{"vector": true, "type": "ChannelCommunicationStmt", 'name' : 'conditions', 'arabic' : 'جزء.من'},
			  {"type": "Statement", 'name' : 'actions', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "BlockStmt",
	"arabic" : "أمر.لكل",
	"parent" : "Statement",
	"nodes" :[{"vector": true, "genGetWholeVector": true, "type": "Statement", 'name' : 'statements', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "InvokationStmt",
	"arabic" : "أمر.لكل",
	"parent" : "Statement",
	"nodes" :[{"type": "Expression", 'name' : 'expression', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "BinaryOperation",
	"arabic" : "أمر.لكل",
	"parent" : "Expression",
	"nodes" :[{"type": "QString", 'name' : 'operator', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'operand1', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'operand2', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "UnaryOperation",
	"arabic" : "أمر.لكل",
	"parent" : "Expression",
	"nodes" :[{"type": "QString", 'name' : 'operator', 'arabic' : 'جزء.من'},
			  {"type": "Expression", 'name' : 'operand1', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "IsaOperation",
	"arabic" : "أمر.لكل",
	"parent" : "Expression",
	"nodes" :[{"type": "Expression", 'name' : 'expression', 'arabic' : 'جزء.من'},
			  {"type": "Identifier", 'name' : 'type', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "MatchOperation",
	"arabic" : "أمر.لكل",
	"parent" : "Expression",
	"nodes" :[{"type": "Expression", 'name' : 'expression', 'arabic' : 'جزء.من'},
			  {"type": "Pattern", 'name' : 'pattern', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "Identifier",
	"arabic" : "أمر.لكل",
	"parent" : "AssignableExpression",
	"nodes" :[{"type": "QString", 'name' : 'name', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "NumLiteral",
	"arabic" : "أمر.لكل",
	"parent" : "SimpleLiteral",
	"nodes" :[{"type": "long", 'name' : 'lValue', 'arabic' : 'جزء.من'},
		      {"type": "double", 'name' : 'dValue', 'arabic' : 'جزء.من'},
			  {"type": "bool", 'name' : 'longNotDouble', 'arabic' : 'جزء.من'},
			  {"type": "bool", 'name' : 'valueRecognized', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "StrLiteral",
	"arabic" : "أمر.لكل",
	"parent" : "SimpleLiteral",
	"nodes" :[{"type": "QString", 'name' : 'value', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "NullLiteral",
	"arabic" : "أمر.لكل",
	"parent" : "SimpleLiteral",
	"nodes" :[]
},
{
	"type": "BoolLiteral",
	"arabic" : "أمر.لكل",
	"parent" : "SimpleLiteral",
	"nodes" :[{"type": "bool", 'name' : 'value', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "ArrayLiteral",
	"arabic" : "أمر.لكل",
	"parent" : "Literal",
	"nodes" :[{'vector': true, "type": "Expression", genGetWholeVector: true, 'name' : 'data', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "MapLiteral",
	"arabic" : "أمر.لكل",
	"parent" : "Literal",
	"nodes" :[{'vector': true, "type": "Expression", genGetWholeVector: true, 'name' : 'data', 'arabic' : 'جزء.من'}
		  ]
},
{
	"type": "IInvokation",
	"arabic" : "أمر.لكل",
	"parent" : "Expression",
	"nodes" :[]
},
{
	"type": "Invokation",
	"arabic" : "أمر.لكل",
	"parent" : "IInvokation",
	"nodes" :[{"type": "Expression", 'name' : 'functor', 'arabic' : 'جزء.من'},
		{'vector': true, "type": "Expression", 'name' : 'arguments', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "MethodInvokation",
	"arabic" : "أمر.لكل",
	"parent" : "IInvokation",
	"nodes" :[{"type": "Expression", 'name' : 'receiver', 'arabic' : 'جزء.من'},
		      {"type": "Identifier", 'name' : 'methodSelector', 'arabic' : 'جزء.من'},
		{'vector': true, "type": "Expression", 'name' : 'arguments', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "TimingExpression",
	"arabic" : "أمر.لكل",
	"parent" : "Expression",
	"nodes" :[{"type": "Expression", 'name' : 'toTime', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "Idafa",
	"arabic" : "أمر.لكل",
	"parent" : "AssignableExpression",
	"nodes" :[{"type": "Expression", 'name' : 'modaf', 'arabic' : 'جزء.من'},
	          {"type": "Expression", 'name' : 'modaf_elaih', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "ArrayIndex",
	"arabic" : "أمر.لكل",
	"parent" : "AssignableExpression",
	"nodes" :[{"type": "Expression", 'name' : 'array', 'arabic' : 'جزء.من'},
	          {"type": "Expression", 'name' : 'index', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "MultiDimensionalArrayIndex",
	"arabic" : "أمر.لكل",
	"parent" : "AssignableExpression",
	"nodes" :[{"type": "Expression", 'name' : 'array', 'arabic' : 'جزء.من'},
	          {'vector': true, "genGetWholeVector": true, "type": "Expression", 'name' : 'indexes', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "ObjectCreation",
	"arabic" : "أمر.لكل",
	"parent" : "Expression",
	"nodes" :[{"type": "Identifier", 'name' : 'className', 'arabic' : 'جزء.من'}
	]
},
{
	"type": "Pattern",
	"arabic" : "أمر.لكل",
	"parent" : "KalimatAst",
	"nodes" :[]
},
{
	"type": "SimpleLiteralPattern",
	"arabic" : "أمر.لكل",
	"parent" : "Pattern",
	"nodes" :[{'type': 'SimpleLiteral', 'name' : 'value', 'arabic': 'قيمة'}
	]
},
{
	"type": "VarLiteralPattern",
	"arabic" : "أمر.لكل",
	"parent" : "Pattern",
	"nodes" :[{'type': 'Identifier', 'name' : 'id', 'arabic': 'قيمة'}
	]
},
{
	"type": "AssignedVarPattern",
	"arabic" : "أمر.لكل",
	"parent" : "Pattern",
	"nodes" :[{'type': 'AssignableExpression', 'name' : 'lv', 'arabic': 'قيمة'}
	]
},
{
	"type": "ArrayPattern",
	"arabic" : "أمر.لكل",
	"parent" : "Pattern",
	"nodes" :[{'vector': true, 'type': 'Pattern', 'name' : 'elements', 'arabic': 'قيمة'}
	]
},
{
	"type": "ObjPattern",
	"arabic" : "أمر.لكل",
	"parent" : "Pattern",
	"nodes" :[{'type': 'Identifier', 'name' : 'classId', 'arabic': 'قيمة'},
              {'vector': true, 'type': 'Identifier', 'name' : 'fieldNames', 'arabic': 'قيمة'},
			  {'vector': true, 'type': 'Pattern', 'name' : 'fieldPatterns', 'arabic': 'قيمة'}
	]
},
{
	"type": "MapPattern",
	"arabic" : "أمر.لكل",
	"parent" : "Pattern",
	"nodes" :[{'vector': true, 'type': 'Expression', 'name' : 'keys', 'arabic': 'قيمة'},
			  {'vector': true, 'type': 'Pattern', 'name' : 'values', 'arabic': 'قيمة'}
	]
},
{
	"type": "TypeExpression",
	"arabic" : "أمر.لكل",
	"parent" : "KalimatAst",
	"nodes" :[]
},
{
	"type": "TypeIdentifier",
	"arabic" : "أمر.لكل",
	"parent" : "TypeExpression",
	"nodes" :[{'type': 'QString', 'name' : 'name', 'arabic': 'اسم'}
	]
},
{
	"type": "PointerTypeExpression",
	"arabic" : "أمر.لكل",
	"parent" : "TypeExpression",
	"nodes" :[{'type': 'TypeExpression', 'name' : 'pointeeType', 'arabic': 'اسم'}
	]
},
{
	"type": "FunctionTypeExpression",
	"arabic" : "أمر.لكل",
	"parent" : "TypeExpression",
	"nodes" :[{'type': 'TypeExpression', 'name' : 'retType', 'arabic': 'اسم'},
			  {'type': 'TypeExpression', 'vector': true, 'name' : 'argTypes', 'arabic': 'اسم'},
	]
},
{
	"type": "Declaration",
	"arabic" : "أمر.لكل",
	"parent" : "TopLevel",
	"nodes" :[{'type': 'bool', 'name' : 'isPublic', 'arabic': 'اسم'}
	]
},
{
	"type": "ProceduralDecl",
	"abstract": true,
	"arabic" : "أمر.لكل",
	"parent" : ["Declaration","IScopeIntroducer"],
	"nodes" :[{'type': 'Identifier', 'name' : 'procName', 'arabic': 'اسم'},
		      {'vector': true, 'type': 'Identifier', 'name' : 'formals', 'arabic': 'اسم'},
			  {'vector': true, 'type': 'Identifier', 'name' : 'allReference', 'hasAddFunction': true, 'arabic': 'اسم'},
			  {'type': 'BlockStmt', 'name' : 'body', 'arabic': 'اسم'},
			  {'type': 'Token', 'name' : 'endingToken', 'arabic': 'اسم'},
	]
},
{
	"type": "IProcedure",
	"arabic" : "أمر.لكل",
	"nodes" :[]
},
{
	"type": "IFunction",
	"arabic" : "أمر.لكل",
	"nodes" :[]
},
{
	"type": "ProcedureDecl",
	"arabic" : "أمر.لكل",
	"parent" : ["ProceduralDecl", "IProcedure"]
	"nodes" :[]
	"abstract" : false;
},
{
	"type": "FunctionDecl",
	"arabic" : "أمر.لكل",
	"parent" : ["ProceduralDecl", "IFunction"]
	"nodes" :[]
	"abstract" : false;
},
{
	"type": "FFILibraryDecl",
	"arabic" : "إعلان.مكتبة.خارجية",
	"parent" : "Declaration"
	"nodes" :[{'type': 'QString', 'name': 'libName', 'arabic': 'اسم.مكتبة'},
		      {'vector': true, 'type': 'Declaration', 'name': 'decls', 'arabic': 'إعلانات'}
	]
},
{
	"type": "FFIProceduralDecl",
	"arabic" : "إعلان.مكتبة.خارجية",
	"parent" : "Declaration"
	"nodes" :[{'type': 'bool', 'name': 'isFunctionNotProc', 'arabic': 'اسم.مكتبة'},
		      {'type': 'QString', 'name': 'procName', 'arabic': 'اسم.مكتبة'},
			  {'type': 'QString', 'name': 'symbol', 'arabic': 'اسم.مكتبة'},
			  {'type': 'TypeExpression', 'name': 'returnType', 'arabic': 'اسم.مكتبة'},
		      {'vector': true, 'type': 'TypeExpression', 'name': 'paramTypes', 'arabic': 'إعلانات'}
	]
},
{
	"type": "FFIProceduralDecl",
	"arabic" : "إعلان.مكتبة.خارجية",
	"parent" : "Declaration"
	"nodes" :[{'type': 'Identifier', 'name': 'name', 'arabic': 'اسم.مكتبة'},
		      {'vector': true, 'type': 'Identifier', 'name': 'fieldNames', 'arabic': 'اسم.مكتبة'},
			  {'vector': true, 'type': 'TypeExpression', 'name': 'fieldTypes', 'arabic': 'اسم.مكتبة'},
		      {'vector': true, 'type': 'int', 'name': 'fieldBatches', 'arabic': 'إعلانات'}
	]
},


struct ClassInternalDecl : public PrettyPrintable
{
    virtual void prettyPrint(CodeFormatter *f) = 0;
};

struct MethodInfo
{
    int arity;
    bool isFunction;
    MethodInfo(int arity, bool isFunction);
    MethodInfo();
};

struct ConcreteResponseInfo : public PrettyPrintable
{
    shared_ptr<Identifier> name;
    QVector<shared_ptr<Identifier> > params;
    void prettyPrint(CodeFormatter *f);

    ConcreteResponseInfo(shared_ptr<Identifier> _name)
        :name(_name)
    {
    }

    void add(shared_ptr<Identifier> param)
    {
        params.append(param);
    }
};

struct Has : public ClassInternalDecl
{
    QMap<QString, shared_ptr<TypeExpression> > _fieldMarshallAs;
    QVector<shared_ptr<Identifier> > fields;
    void prettyPrint(CodeFormatter *f);
    void add(shared_ptr<Identifier> field)
    {
        fields.append(shared_ptr<Identifier>(field));
    }
    int fieldCount() { return fields.count(); }
    Identifier *field(int i) { return fields[i].get(); }
    TypeExpression *marshallingTypeOf(QString field)
    {
        if(_fieldMarshallAs.contains(field))
            return _fieldMarshallAs[field].get();
        else
            return NULL;
    }
};

struct RespondsTo : public ClassInternalDecl
{
    bool isFunctions;
    QVector<shared_ptr<ConcreteResponseInfo> > methods;

    RespondsTo(bool _isFunctions) { isFunctions = _isFunctions;}
    void prettyPrint(CodeFormatter *f);
    void add(shared_ptr<ConcreteResponseInfo> mi)
    {
        methods.append(mi);
    }
    ConcreteResponseInfo *method(int i) { return methods[i].get(); }
    int methodCount() { return methods.count(); }
};

class ClassDecl : public Declaration
{
    Q_OBJECT
public:
    shared_ptr<Identifier> _ancestorName;
    shared_ptr<Identifier> _name;
    QVector<shared_ptr<Identifier > > _fields;
    QMap<QString, MethodInfo>  _methodPrototypes;
    QVector<shared_ptr<ClassInternalDecl> > _internalDecls; // For pretty printing...etc
    QMap<QString, shared_ptr<TypeExpression> > _fieldMarshallAs;
    QMap<QString, shared_ptr<MethodDecl> > _methods;
    shared_ptr<ClassDecl> _ancestorClass;

public:
    ClassDecl(Token pos,
              shared_ptr<Identifier> name,
              QVector<shared_ptr<Identifier> > fields,
              QMap<QString,MethodInfo> methodPrototypes,
              QVector<shared_ptr<ClassInternalDecl> > internalDecls,
              QMap<QString, shared_ptr<TypeExpression> > fieldMarshalAs,
              bool isPublic);
    ClassDecl(Token pos,
              shared_ptr<Identifier> ancestorName,
              shared_ptr<Identifier> name,
              QVector<shared_ptr<Identifier> > fields,
              QMap<QString,MethodInfo> methodPrototypes,
              QVector<shared_ptr<ClassInternalDecl> > internalDecls,
              QMap<QString, shared_ptr<TypeExpression> > fieldMarshalAs,
              bool isPublic);
    shared_ptr<Identifier> name() { return _name;}
    int fieldCount() { return _fields.count();}
    shared_ptr<Identifier> field(int i) { return _fields[i];}
    bool containsMethod(QString name);
    bool containsPrototype(QString name);
    int methodCount() { return _methods.count();}
    shared_ptr<MethodDecl> method(QString name);
    shared_ptr<MethodDecl> method(int i) { return _methods.values().at(i);}
    MethodInfo methodPrototype(QString name);
    int prototypeCount() { return _methodPrototypes.count();}
    shared_ptr<Identifier> ancestor() { return _ancestorName;}
    bool fieldHasMarshalType(QString fieldName) { return _fieldMarshallAs.contains(fieldName); }
    shared_ptr<TypeExpression> marshalTypeOf(QString fieldName) { return _fieldMarshallAs[fieldName]; }

    void setAncestorClass(shared_ptr<ClassDecl> cd);
    void insertMethod(QString name, shared_ptr<MethodDecl> m);
    QString toString();
    void prettyPrint(CodeFormatter *f);
};

class GlobalDecl : public Declaration
{
    Q_OBJECT
public:
    QString varName;
public:
    GlobalDecl(Token pos, QString varName, bool isPublic);
    QString toString();
    void prettyPrint(CodeFormatter *f);
};

class MethodDecl : public ProceduralDecl
{
    Q_OBJECT
public:
    shared_ptr<Identifier> _className;
    shared_ptr<Identifier> _receiverName;
    bool isFunctionNotProcedure;
public:
    MethodDecl(Token pos,
               Token endingToken,
               shared_ptr<Identifier> className,
               shared_ptr<Identifier> receiverName,
               shared_ptr<Identifier> methodName,
               QVector<shared_ptr<Identifier> > formals,
               shared_ptr<BlockStmt> body,
               bool isFunctionNotProcedure);
    Identifier *className() { return _className.get();}
    Identifier *receiverName() { return _receiverName.get();}
    QString toString();
    void prettyPrint(CodeFormatter *f);
};
]